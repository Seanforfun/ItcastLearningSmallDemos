Jquery总结：
选择器：
1.id选择器：$("#id名称")
<input type="text" name="usercode" id="test">
$("#test")

2.class选择器：$("#class名称")
<input type="text" name="usercode1" class="userinfo">
<input type="text" name="usercode2" class="userinfo">
<input type="text" name="usercode3" class="userinfo">
$(".userinfo"),返回的不只是一个元素，可能是多个，适合用于对有相同作用的元素的控制。

3.标签选择器：$("p")
所有 <p> 元素

4.高级选择器：
[attribute=value] 	$("[href='#']") 	所有 href 属性的值等于 "#" 的元素

总结：
$(this) 	当前 HTML 元素
$("p") 	所有 <p> 元素
$("p.intro") 	所有 class="intro" 的 <p> 元素
$(".intro") 	所有 class="intro" 的元素
$("#intro") 	id="intro" 的元素
$("ul li:first") 	每个 <ul> 的第一个 <li> 元素
$("[href$='.jpg']") 	所有带有以 ".jpg" 结尾的属性值的 href 属性
$("div#intro .head") 	id="intro" 的 <div> 元素中的所有 class="head" 的元素

******************************************************************************************
Ajax总结：
---------------------------------------------------------------------------------------
Ajax方法：默认是get方法
$.ajax([settings])
$.ajax({ url: "test.html",
		 context: document.body,
		 success: function(){
			$(this).addClass("done");
		}});
		
Ajax函数内部的数据是以Json形式存在的。
重要的setting：
async
    类型：Boolean
    默认值: true。默认设置下，所有请求均为异步请求。如果需要发送同步请求，请将此选项设置为 false。
    注意，同步请求将锁住浏览器，用户其它操作必须等待请求完成才可以执行。
contentType（文件上传时需要改成multipart/form-data）
    类型：String
    默认值: "application/x-www-form-urlencoded"。发送信息至服务器时内容编码类型。
    默认值适合大多数情况。如果你明确地传递了一个 content-type 给 $.ajax() 那么它必定会发送给服务器（即使没有数据要发送）。
data
    类型：String
    发送到服务器的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。查看 processData 选项说明以禁止此自动转换。必须为 Key/Value 格式。如果为数组，jQuery 将自动为不同值对应同一个名称。如 {foo:["bar1", "bar2"]} 转换为 '&foo=bar1&foo=bar2'。
dataType(当返回为json的时候需要修改)
    类型：String
    预期服务器返回的数据类型。如果不指定，jQuery 将自动根据 HTTP 包 MIME 信息来智能判断，比如 XML MIME 类型就被识别为 XML。在 1.4 中，JSON 就会生成一个 JavaScript 对象，而 script 则会执行这个脚本。随后服务器端返回的数据会根据这个值解析后，传递给回调函数。可用值:
        "xml": 返回 XML 文档，可用 jQuery 处理。
        "html": 返回纯文本 HTML 信息；包含的 script 标签会在插入 dom 时执行。
        "script": 返回纯文本 JavaScript 代码。不会自动缓存结果。除非设置了 "cache" 参数。注意：在远程请求时(不在同一个域下)，所有 POST 请求都将转为 GET 请求。（因为将使用 DOM 的 script标签来加载）
        "json": 返回 JSON 数据 。
        "jsonp": JSONP 格式。使用 JSONP 形式调用函数时，如 "myurl?callback=?" jQuery 将自动替换 ? 为正确的函数名，以执行回调函数。
        "text": 返回纯文本字符串
success：(成功后的回调函数)
    类型：Function
    请求成功后的回调函数。
    参数：由服务器返回，并根据 dataType 参数进行处理后的数据；描述状态的字符串。
    这是一个 Ajax 事件。
type：
    类型：String
    默认值: "GET"。请求方式 ("POST" 或 "GET")， 默认为 "GET"。注意：其它 HTTP 请求方法，如 PUT 和 DELETE 也可以使用，但仅部分浏览器支持。
url：(发送给controller)
    类型：String
    默认值: 当前页地址。发送请求的地址。

回调函数
如果要处理 $.ajax() 得到的数据，则需要使用回调函数：beforeSend、error、dataFilter、success、complete。
beforeSend
在发送请求之前调用，并且传入一个 XMLHttpRequest 作为参数。
error
在请求出错时调用。传入 XMLHttpRequest 对象，描述错误类型的字符串以及一个异常对象（如果有的话）
dataFilter
在请求成功之后调用。传入返回的数据以及 "dataType" 参数的值。并且必须返回新的数据（可能是处理过的）传递给 success 回调函数。
success
当请求之后调用。传入返回后的数据，以及包含成功代码的字符串。
complete
当请求完成之后调用这个函数，无论成功或失败。传入 XMLHttpRequest 对象，以及一个包含成功或错误代码的字符串。
---------------------------------------------------------------------------------------
POST方法：默认是post方法
post() 方法通过 HTTP POST 请求从服务器载入数据。
$.post("order_ajaxInGoods.action", jsonParam, function(data){
			//Callback function
		});
	});
参数 								描述
url 								必需。规定把请求发送到哪个 URL。
data 								可选。映射或字符串值。规定连同请求发送到服务器的数据。
success(data, textStatus, jqXHR) 	可选。请求成功时执行的回调函数。
dataType 							可选。规定预期的服务器响应的数据类型。默认执行智能判断（xml、json、script 或 html）。

******************************************************************************************	
Serialize方法：
var data = 选择器.serialize();
usercode=1&password=1



		